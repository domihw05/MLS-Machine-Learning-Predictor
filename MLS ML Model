{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8f07bcd5",
   "metadata": {
    "papermill": {
     "duration": 0.009103,
     "end_time": "2025-02-11T19:35:52.271044",
     "exception": false,
     "start_time": "2025-02-11T19:35:52.261941",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Building MLS Predictive ML Model***"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42325e68",
   "metadata": {
    "papermill": {
     "duration": 0.008077,
     "end_time": "2025-02-11T19:35:52.287742",
     "exception": false,
     "start_time": "2025-02-11T19:35:52.279665",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data Cleaning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6f3522ba",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:52.306026Z",
     "iopub.status.busy": "2025-02-11T19:35:52.305610Z",
     "iopub.status.idle": "2025-02-11T19:35:53.164752Z",
     "shell.execute_reply": "2025-02-11T19:35:53.163890Z"
    },
    "papermill": {
     "duration": 0.87042,
     "end_time": "2025-02-11T19:35:53.166625",
     "exception": false,
     "start_time": "2025-02-11T19:35:52.296205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import Necessary Packages\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "42f4124e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:53.185360Z",
     "iopub.status.busy": "2025-02-11T19:35:53.184802Z",
     "iopub.status.idle": "2025-02-11T19:35:54.061566Z",
     "shell.execute_reply": "2025-02-11T19:35:54.060493Z"
    },
    "papermill": {
     "duration": 0.888061,
     "end_time": "2025-02-11T19:35:54.063376",
     "exception": false,
     "start_time": "2025-02-11T19:35:53.175315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-2-53af791da475>:3: DtypeWarning: Columns (24,28) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  mls_stats = pd.read_csv(\"/kaggle/input/football-match-statistics-and-more/fixture_stats_clean.csv\")\n"
     ]
    }
   ],
   "source": [
    "# Import both datasets\n",
    "mls_games = pd.read_csv(\"/kaggle/input/football-match-statistics-and-more/fixture_stats_teams_clean.csv\")\n",
    "mls_stats = pd.read_csv(\"/kaggle/input/football-match-statistics-and-more/fixture_stats_clean.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a45f02d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.081570Z",
     "iopub.status.busy": "2025-02-11T19:35:54.081250Z",
     "iopub.status.idle": "2025-02-11T19:35:54.181490Z",
     "shell.execute_reply": "2025-02-11T19:35:54.180558Z"
    },
    "papermill": {
     "duration": 0.111268,
     "end_time": "2025-02-11T19:35:54.183301",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.072033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge Datasets\n",
    "mls_games = mls_games.merge(mls_stats,left_on=['fixture_id'],right_on=['fixture_id'],how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "46847a81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.202201Z",
     "iopub.status.busy": "2025-02-11T19:35:54.201811Z",
     "iopub.status.idle": "2025-02-11T19:35:54.216453Z",
     "shell.execute_reply": "2025-02-11T19:35:54.215606Z"
    },
    "papermill": {
     "duration": 0.025684,
     "end_time": "2025-02-11T19:35:54.218027",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.192343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mls_stats = mls_games[mls_games['league_name'] == 'Major League Soccer']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2e664575",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.236578Z",
     "iopub.status.busy": "2025-02-11T19:35:54.236247Z",
     "iopub.status.idle": "2025-02-11T19:35:54.402647Z",
     "shell.execute_reply": "2025-02-11T19:35:54.401694Z"
    },
    "papermill": {
     "duration": 0.177431,
     "end_time": "2025-02-11T19:35:54.404340",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.226909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-5baafcb0808b>:1: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:2: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].astype(bool)\n",
      "<ipython-input-5-5baafcb0808b>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].astype(bool)\n",
      "<ipython-input-5-5baafcb0808b>:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['result'] = mls_stats.apply(match_result,axis = 1)\n",
      "<ipython-input-5-5baafcb0808b>:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['home_away'] = mls_stats.apply(home_away,axis = 1)\n"
     ]
    }
   ],
   "source": [
    "mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].fillna(False)\n",
    "mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].fillna(False)\n",
    "mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].astype(bool)\n",
    "mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].astype(bool)\n",
    "\n",
    "def match_result(row):\n",
    "    if row['teams_home_winner'] == True:\n",
    "        return 0 # equals home win\n",
    "    elif row['teams_away_winner'] == True:\n",
    "        return 2 # equals away win\n",
    "    else:\n",
    "        return 1 # draw\n",
    "\n",
    "def home_away(row):\n",
    "    is_home = row['teams_home_name'] == row['team_name']\n",
    "    if is_home:\n",
    "        return 'Home'\n",
    "    else:\n",
    "        return 'Away'\n",
    "\n",
    "# Add column for predictor label\n",
    "mls_stats['result'] = mls_stats.apply(match_result,axis = 1)\n",
    "mls_stats['home_away'] = mls_stats.apply(home_away,axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ef1ad62e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.423117Z",
     "iopub.status.busy": "2025-02-11T19:35:54.422771Z",
     "iopub.status.idle": "2025-02-11T19:35:54.430092Z",
     "shell.execute_reply": "2025-02-11T19:35:54.429058Z"
    },
    "papermill": {
     "duration": 0.018409,
     "end_time": "2025-02-11T19:35:54.431530",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.413121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop unnecessary columns\n",
    "mls_stats = mls_stats.drop(columns = ['team_id', 'team_logo',\n",
    "       'fixture_timezone', 'fixture_timestamp', 'fixture_periods_first',\n",
    "       'fixture_periods_second', 'fixture_referee', 'fixture_venue_id',\n",
    "       'fixture_venue_name', 'fixture_venue_city', 'fixture_status_long',\n",
    "       'fixture_status_short', 'fixture_status_elapsed',\n",
    "       'fixture_status_extra', 'league_id', 'league_name', 'league_country',\n",
    "       'league_logo', 'league_flag', 'league_season',\n",
    "       'teams_home_id',  'teams_home_logo',\n",
    "       'teams_home_winner', 'teams_away_id', \n",
    "       'teams_away_logo', 'teams_away_winner', 'goals_home', 'goals_away',\n",
    "       'score_halftime_home', 'score_halftime_away', 'score_fulltime_home',\n",
    "       'score_fulltime_away', 'score_extratime_home', 'score_extratime_away',\n",
    "       'score_penalty_home', 'score_penalty_away'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3dbd0131",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.450083Z",
     "iopub.status.busy": "2025-02-11T19:35:54.449732Z",
     "iopub.status.idle": "2025-02-11T19:35:54.456158Z",
     "shell.execute_reply": "2025-02-11T19:35:54.455235Z"
    },
    "papermill": {
     "duration": 0.017375,
     "end_time": "2025-02-11T19:35:54.457573",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.440198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fixture_id', 'team_name', 'total_passes', 'completed_passes',\n",
       "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
       "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
       "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
       "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
       "       'red_cards', 'goalkeeper_saves', 'goals_prevented', 'fixture_date',\n",
       "       'league_round', 'teams_home_name', 'teams_away_name', 'result',\n",
       "       'home_away'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mls_stats.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b5ed8683",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.476075Z",
     "iopub.status.busy": "2025-02-11T19:35:54.475700Z",
     "iopub.status.idle": "2025-02-11T19:35:54.491693Z",
     "shell.execute_reply": "2025-02-11T19:35:54.490568Z"
    },
    "papermill": {
     "duration": 0.027039,
     "end_time": "2025-02-11T19:35:54.493281",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.466242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "mls_stats['fixture_date'] = mls_stats['fixture_date'].str.replace(\" UTC\",\"\")\n",
    "mls_stats['date'] = pd.to_datetime(mls_stats['fixture_date'],format='%Y-%m-%d %H:%M:%S', errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0847b6ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.512109Z",
     "iopub.status.busy": "2025-02-11T19:35:54.511729Z",
     "iopub.status.idle": "2025-02-11T19:35:54.529478Z",
     "shell.execute_reply": "2025-02-11T19:35:54.528458Z"
    },
    "papermill": {
     "duration": 0.028846,
     "end_time": "2025-02-11T19:35:54.531107",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.502261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "mls_stats['team_code'] = mls_stats['team_name'].astype(\"category\").cat.codes\n",
    "mls_stats['home_code'] = mls_stats['teams_home_name'].astype(\"category\").cat.codes\n",
    "mls_stats['away_code'] = mls_stats['teams_away_name'].astype(\"category\").cat.codes\n",
    "mls_stats['hour'] = mls_stats[\"date\"].dt.to_period('h').astype(int)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e1c0903f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.549614Z",
     "iopub.status.busy": "2025-02-11T19:35:54.549298Z",
     "iopub.status.idle": "2025-02-11T19:35:54.554243Z",
     "shell.execute_reply": "2025-02-11T19:35:54.553366Z"
    },
    "papermill": {
     "duration": 0.015958,
     "end_time": "2025-02-11T19:35:54.555796",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.539838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mls_stats['dayofweek'] = mls_stats['date'].dt.dayofweek"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cb08137c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.575118Z",
     "iopub.status.busy": "2025-02-11T19:35:54.574755Z",
     "iopub.status.idle": "2025-02-11T19:35:54.582502Z",
     "shell.execute_reply": "2025-02-11T19:35:54.581708Z"
    },
    "papermill": {
     "duration": 0.019016,
     "end_time": "2025-02-11T19:35:54.584214",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.565198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mls_stats = mls_stats.sort_values(\"date\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "478bf1b3",
   "metadata": {
    "papermill": {
     "duration": 0.008709,
     "end_time": "2025-02-11T19:35:54.602089",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.593380",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Build ML Model (Try 1)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e4d9849f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:54.620848Z",
     "iopub.status.busy": "2025-02-11T19:35:54.620521Z",
     "iopub.status.idle": "2025-02-11T19:35:56.314214Z",
     "shell.execute_reply": "2025-02-11T19:35:56.313245Z"
    },
    "papermill": {
     "duration": 1.705257,
     "end_time": "2025-02-11T19:35:56.316245",
     "exception": false,
     "start_time": "2025-02-11T19:35:54.610988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b45f7198",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:56.335260Z",
     "iopub.status.busy": "2025-02-11T19:35:56.334716Z",
     "iopub.status.idle": "2025-02-11T19:35:56.339128Z",
     "shell.execute_reply": "2025-02-11T19:35:56.338216Z"
    },
    "papermill": {
     "duration": 0.015433,
     "end_time": "2025-02-11T19:35:56.340545",
     "exception": false,
     "start_time": "2025-02-11T19:35:56.325112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier(n_estimators = 2500, min_samples_split=10, random_state = 1,criterion='gini')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1ace1f29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:56.359516Z",
     "iopub.status.busy": "2025-02-11T19:35:56.359118Z",
     "iopub.status.idle": "2025-02-11T19:35:56.367910Z",
     "shell.execute_reply": "2025-02-11T19:35:56.366973Z"
    },
    "papermill": {
     "duration": 0.02036,
     "end_time": "2025-02-11T19:35:56.369716",
     "exception": false,
     "start_time": "2025-02-11T19:35:56.349356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = mls_stats[mls_stats[\"date\"] < '2019-01-01']\n",
    "test = mls_stats[mls_stats[\"date\"] > '2019-01-01']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4ef25c5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:56.389052Z",
     "iopub.status.busy": "2025-02-11T19:35:56.388656Z",
     "iopub.status.idle": "2025-02-11T19:35:56.394576Z",
     "shell.execute_reply": "2025-02-11T19:35:56.393594Z"
    },
    "papermill": {
     "duration": 0.017529,
     "end_time": "2025-02-11T19:35:56.396264",
     "exception": false,
     "start_time": "2025-02-11T19:35:56.378735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fixture_id', 'team_name', 'total_passes', 'completed_passes',\n",
       "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
       "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
       "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
       "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
       "       'red_cards', 'goalkeeper_saves', 'goals_prevented', 'fixture_date',\n",
       "       'league_round', 'teams_home_name', 'teams_away_name', 'result',\n",
       "       'home_away', 'date', 'team_code', 'home_code', 'away_code', 'hour',\n",
       "       'dayofweek'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mls_stats.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f83aba32",
   "metadata": {
    "papermill": {
     "duration": 0.008621,
     "end_time": "2025-02-11T19:35:56.414110",
     "exception": false,
     "start_time": "2025-02-11T19:35:56.405489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For this first try, I tried using 4 simple predictors: home team name, away team name, hour of the day, day of the week."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "727d4620",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:35:56.434902Z",
     "iopub.status.busy": "2025-02-11T19:35:56.434506Z",
     "iopub.status.idle": "2025-02-11T19:36:07.713431Z",
     "shell.execute_reply": "2025-02-11T19:36:07.712346Z"
    },
    "papermill": {
     "duration": 11.290648,
     "end_time": "2025-02-11T19:36:07.715180",
     "exception": false,
     "start_time": "2025-02-11T19:35:56.424532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(min_samples_split=10, n_estimators=2500, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(min_samples_split=10, n_estimators=2500, random_state=1)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(min_samples_split=10, n_estimators=2500, random_state=1)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictors = ['home_code','away_code','hour','dayofweek']\n",
    "rf.fit(train[predictors],train[\"result\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "78a3cbf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:07.734824Z",
     "iopub.status.busy": "2025-02-11T19:36:07.734482Z",
     "iopub.status.idle": "2025-02-11T19:36:09.114710Z",
     "shell.execute_reply": "2025-02-11T19:36:09.113629Z"
    },
    "papermill": {
     "duration": 1.39207,
     "end_time": "2025-02-11T19:36:09.116489",
     "exception": false,
     "start_time": "2025-02-11T19:36:07.724419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.45249537892791125"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = rf.predict(test[predictors])\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc = accuracy_score(test['result'],preds)\n",
    "acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95809f00",
   "metadata": {
    "papermill": {
     "duration": 0.008923,
     "end_time": "2025-02-11T19:36:09.134830",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.125907",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This yielded an accuracy of 45.25%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b3a5b20f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.155266Z",
     "iopub.status.busy": "2025-02-11T19:36:09.154909Z",
     "iopub.status.idle": "2025-02-11T19:36:09.186728Z",
     "shell.execute_reply": "2025-02-11T19:36:09.185728Z"
    },
    "papermill": {
     "duration": 0.043621,
     "end_time": "2025-02-11T19:36:09.188340",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.144719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>prediction</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2184</td>\n",
       "      <td>60</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1082</td>\n",
       "      <td>38</td>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1174</td>\n",
       "      <td>38</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "prediction     0   1    2\n",
       "actual                   \n",
       "0           2184  60  392\n",
       "1           1082  38  216\n",
       "2           1174  38  226"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined = pd.DataFrame(dict(actual=test['result'],prediction = preds))\n",
    "pd.crosstab(index=combined['actual'],columns=combined['prediction'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "400aaa60",
   "metadata": {
    "papermill": {
     "duration": 0.009015,
     "end_time": "2025-02-11T19:36:09.206839",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.197824",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Build ML Model (Try 2)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9797bb4",
   "metadata": {
    "papermill": {
     "duration": 0.009018,
     "end_time": "2025-02-11T19:36:09.225411",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.216393",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This time, we will try to incorporate rolling statistics into the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e78123b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.245311Z",
     "iopub.status.busy": "2025-02-11T19:36:09.244958Z",
     "iopub.status.idle": "2025-02-11T19:36:09.251779Z",
     "shell.execute_reply": "2025-02-11T19:36:09.250881Z"
    },
    "papermill": {
     "duration": 0.018692,
     "end_time": "2025-02-11T19:36:09.253524",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.234832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grouped_matches = mls_stats.groupby(\"team_name\")\n",
    "group = grouped_matches.get_group(\"Portland Timbers\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5fd2d5b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.273644Z",
     "iopub.status.busy": "2025-02-11T19:36:09.273308Z",
     "iopub.status.idle": "2025-02-11T19:36:09.278931Z",
     "shell.execute_reply": "2025-02-11T19:36:09.277939Z"
    },
    "papermill": {
     "duration": 0.017455,
     "end_time": "2025-02-11T19:36:09.280399",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.262944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def rolling_average(group,cols,new_cols):\n",
    "    group = group.sort_values(\"date\")\n",
    "    rolling_stats = group[cols].rolling(3, closed='left').mean()\n",
    "    group[new_cols] = rolling_stats\n",
    "    group = group.dropna(subset=new_cols)\n",
    "    return group\n",
    "\n",
    "\n",
    "def days_rest(group):\n",
    "    group = group.sort_values(\"date\")\n",
    "    group[\"days_since_last\"] = group[\"date\"].diff().dt.days\n",
    "\n",
    "    # Fill the first row with NaN or 0 (since there's no previous date for the first row)\n",
    "    group[\"days_since_last\"] = group[\"days_since_last\"].fillna(0).astype(int)\n",
    "    return group\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d81303a7",
   "metadata": {
    "papermill": {
     "duration": 0.008951,
     "end_time": "2025-02-11T19:36:09.298795",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.289844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Many more predictors are being used this time, as seen below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e61a4c85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.318405Z",
     "iopub.status.busy": "2025-02-11T19:36:09.318072Z",
     "iopub.status.idle": "2025-02-11T19:36:09.323873Z",
     "shell.execute_reply": "2025-02-11T19:36:09.322684Z"
    },
    "papermill": {
     "duration": 0.017494,
     "end_time": "2025-02-11T19:36:09.325526",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.308032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['fixture_id', 'team_name', 'total_passes', 'completed_passes',\n",
      "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
      "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
      "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
      "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
      "       'red_cards', 'goalkeeper_saves', 'goals_prevented', 'fixture_date',\n",
      "       'league_round', 'teams_home_name', 'teams_away_name', 'result',\n",
      "       'home_away', 'date', 'team_code', 'home_code', 'away_code', 'hour',\n",
      "       'dayofweek'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(mls_stats.columns)\n",
    "cols = ['total_passes', 'completed_passes',\n",
    "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
    "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
    "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
    "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
    "       'red_cards', 'goalkeeper_saves', 'goals_prevented']\n",
    "\n",
    "new_cols = [f\"{c}_rolling\" for c in cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d89095ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.345429Z",
     "iopub.status.busy": "2025-02-11T19:36:09.345072Z",
     "iopub.status.idle": "2025-02-11T19:36:09.387283Z",
     "shell.execute_reply": "2025-02-11T19:36:09.386234Z"
    },
    "papermill": {
     "duration": 0.054044,
     "end_time": "2025-02-11T19:36:09.389031",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.334987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixture_id</th>\n",
       "      <th>team_name</th>\n",
       "      <th>total_passes</th>\n",
       "      <th>completed_passes</th>\n",
       "      <th>pass_percentage</th>\n",
       "      <th>assists</th>\n",
       "      <th>goals</th>\n",
       "      <th>expected_goals</th>\n",
       "      <th>shots_on_goal</th>\n",
       "      <th>shots_off_goal</th>\n",
       "      <th>...</th>\n",
       "      <th>teams_home_name</th>\n",
       "      <th>teams_away_name</th>\n",
       "      <th>result</th>\n",
       "      <th>home_away</th>\n",
       "      <th>date</th>\n",
       "      <th>team_code</th>\n",
       "      <th>home_code</th>\n",
       "      <th>away_code</th>\n",
       "      <th>hour</th>\n",
       "      <th>dayofweek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>53110</th>\n",
       "      <td>491123</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>465</td>\n",
       "      <td>381</td>\n",
       "      <td>0.82</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Chicago Fire</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2015-03-07 03:00:00</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>396027</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17194</th>\n",
       "      <td>491123</td>\n",
       "      <td>Chicago Fire</td>\n",
       "      <td>427</td>\n",
       "      <td>332</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Chicago Fire</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2015-03-07 03:00:00</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>396027</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17752</th>\n",
       "      <td>491124</td>\n",
       "      <td>CF Montreal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>DC United</td>\n",
       "      <td>CF Montreal</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2015-03-07 20:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>396044</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17831</th>\n",
       "      <td>491124</td>\n",
       "      <td>DC United</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>DC United</td>\n",
       "      <td>CF Montreal</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2015-03-07 20:00:00</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>396044</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17421</th>\n",
       "      <td>491125</td>\n",
       "      <td>Colorado Rapids</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Philadelphia Union</td>\n",
       "      <td>Colorado Rapids</td>\n",
       "      <td>1</td>\n",
       "      <td>Away</td>\n",
       "      <td>2015-03-07 21:00:00</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>5</td>\n",
       "      <td>396045</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37799</th>\n",
       "      <td>1316662</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>303</td>\n",
       "      <td>216</td>\n",
       "      <td>0.71</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.78</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Orlando City SC</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>2</td>\n",
       "      <td>Away</td>\n",
       "      <td>2024-12-01 00:30:00</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>18</td>\n",
       "      <td>481392</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38134</th>\n",
       "      <td>1316663</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>557</td>\n",
       "      <td>503</td>\n",
       "      <td>0.90</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.84</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Seattle Sounders</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2024-12-01 03:00:00</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>481395</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16178</th>\n",
       "      <td>1316663</td>\n",
       "      <td>Seattle Sounders</td>\n",
       "      <td>461</td>\n",
       "      <td>408</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.41</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Seattle Sounders</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2024-12-01 03:00:00</td>\n",
       "      <td>24</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>481395</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53188</th>\n",
       "      <td>1318600</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>386</td>\n",
       "      <td>290</td>\n",
       "      <td>0.75</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.82</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2024-12-07 21:00:00</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>481557</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37794</th>\n",
       "      <td>1318600</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>543</td>\n",
       "      <td>441</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.91</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2024-12-07 21:00:00</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>481557</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8380 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       fixture_id           team_name  total_passes  completed_passes  \\\n",
       "53110      491123  Los Angeles Galaxy           465               381   \n",
       "17194      491123        Chicago Fire           427               332   \n",
       "17752      491124         CF Montreal             0                 0   \n",
       "17831      491124           DC United             0                 0   \n",
       "17421      491125     Colorado Rapids             0                 0   \n",
       "...           ...                 ...           ...               ...   \n",
       "37799     1316662  New York Red Bulls           303               216   \n",
       "38134     1316663  Los Angeles Galaxy           557               503   \n",
       "16178     1316663    Seattle Sounders           461               408   \n",
       "53188     1318600  Los Angeles Galaxy           386               290   \n",
       "37794     1318600  New York Red Bulls           543               441   \n",
       "\n",
       "       pass_percentage  assists  goals  expected_goals  shots_on_goal  \\\n",
       "53110             0.82        1      2            0.00              5   \n",
       "17194             0.78        0      0            0.00              1   \n",
       "17752             0.00        0      0            0.00              3   \n",
       "17831             0.00        0      0            0.00              4   \n",
       "17421             0.00        0      0            0.00              0   \n",
       "...                ...      ...    ...             ...            ...   \n",
       "37799             0.71        1      1            0.78              1   \n",
       "38134             0.90        1      1            0.84              5   \n",
       "16178             0.89        0      0            0.41              4   \n",
       "53188             0.75        2      2            1.82              6   \n",
       "37794             0.81        0      1            0.91              3   \n",
       "\n",
       "       shots_off_goal  ...     teams_home_name     teams_away_name  result  \\\n",
       "53110               7  ...  Los Angeles Galaxy        Chicago Fire       0   \n",
       "17194               3  ...  Los Angeles Galaxy        Chicago Fire       0   \n",
       "17752               6  ...           DC United         CF Montreal       0   \n",
       "17831               5  ...           DC United         CF Montreal       0   \n",
       "17421               2  ...  Philadelphia Union     Colorado Rapids       1   \n",
       "...               ...  ...                 ...                 ...     ...   \n",
       "37799               2  ...     Orlando City SC  New York Red Bulls       2   \n",
       "38134               3  ...  Los Angeles Galaxy    Seattle Sounders       0   \n",
       "16178               1  ...  Los Angeles Galaxy    Seattle Sounders       0   \n",
       "53188               6  ...  Los Angeles Galaxy  New York Red Bulls       0   \n",
       "37794               3  ...  Los Angeles Galaxy  New York Red Bulls       0   \n",
       "\n",
       "       home_away                date  team_code  home_code  away_code    hour  \\\n",
       "53110       Home 2015-03-07 03:00:00         13         13          4  396027   \n",
       "17194       Away 2015-03-07 03:00:00          4         13          4  396027   \n",
       "17752       Away 2015-03-07 20:00:00          2          7          2  396044   \n",
       "17831       Home 2015-03-07 20:00:00          7          7          2  396044   \n",
       "17421       Away 2015-03-07 21:00:00          5         20          5  396045   \n",
       "...          ...                 ...        ...        ...        ...     ...   \n",
       "37799       Away 2024-12-01 00:30:00         18         19         18  481392   \n",
       "38134       Home 2024-12-01 03:00:00         13         13         24  481395   \n",
       "16178       Away 2024-12-01 03:00:00         24         13         24  481395   \n",
       "53188       Home 2024-12-07 21:00:00         13         13         18  481557   \n",
       "37794       Away 2024-12-07 21:00:00         18         13         18  481557   \n",
       "\n",
       "       dayofweek  \n",
       "53110          5  \n",
       "17194          5  \n",
       "17752          5  \n",
       "17831          5  \n",
       "17421          5  \n",
       "...          ...  \n",
       "37799          6  \n",
       "38134          6  \n",
       "16178          6  \n",
       "53188          5  \n",
       "37794          5  \n",
       "\n",
       "[8380 rows x 34 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rolling_average(group,cols,new_cols)\n",
    "mls_stats = mls_stats.sort_values('date')\n",
    "mls_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cd27325a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.410690Z",
     "iopub.status.busy": "2025-02-11T19:36:09.410278Z",
     "iopub.status.idle": "2025-02-11T19:36:09.742498Z",
     "shell.execute_reply": "2025-02-11T19:36:09.741335Z"
    },
    "papermill": {
     "duration": 0.34511,
     "end_time": "2025-02-11T19:36:09.744372",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.399262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-23-5fba18931882>:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  matches_rolling = mls_stats.groupby(\"team_name\").apply(lambda x: rolling_average(x,cols,new_cols))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "matches_rolling = mls_stats.groupby(\"team_name\").apply(lambda x: rolling_average(x,cols,new_cols))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "dea48f75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.765540Z",
     "iopub.status.busy": "2025-02-11T19:36:09.765159Z",
     "iopub.status.idle": "2025-02-11T19:36:09.779142Z",
     "shell.execute_reply": "2025-02-11T19:36:09.778052Z"
    },
    "papermill": {
     "duration": 0.026574,
     "end_time": "2025-02-11T19:36:09.781060",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.754486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "matches_rolling = matches_rolling.droplevel('team_name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "aa81e5b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.802627Z",
     "iopub.status.busy": "2025-02-11T19:36:09.802289Z",
     "iopub.status.idle": "2025-02-11T19:36:09.870086Z",
     "shell.execute_reply": "2025-02-11T19:36:09.868981Z"
    },
    "papermill": {
     "duration": 0.080401,
     "end_time": "2025-02-11T19:36:09.871737",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.791336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-25-d363f74fd55e>:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  matches_rolling = matches_rolling.groupby(\"team_name\").apply(lambda x: days_rest(x))\n"
     ]
    }
   ],
   "source": [
    "matches_rolling = matches_rolling.groupby(\"team_name\").apply(lambda x: days_rest(x))\n",
    "matches_rolling = matches_rolling.droplevel('team_name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8744a536",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.893250Z",
     "iopub.status.busy": "2025-02-11T19:36:09.892889Z",
     "iopub.status.idle": "2025-02-11T19:36:09.896844Z",
     "shell.execute_reply": "2025-02-11T19:36:09.895999Z"
    },
    "papermill": {
     "duration": 0.016585,
     "end_time": "2025-02-11T19:36:09.898604",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.882019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "matches_rolling.index = range(matches_rolling.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "80b25180",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.920884Z",
     "iopub.status.busy": "2025-02-11T19:36:09.920493Z",
     "iopub.status.idle": "2025-02-11T19:36:09.926265Z",
     "shell.execute_reply": "2025-02-11T19:36:09.925194Z"
    },
    "papermill": {
     "duration": 0.01877,
     "end_time": "2025-02-11T19:36:09.927787",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.909017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def make_predictions(data, predictors):\n",
    "    train = data[data[\"date\"] < '2019-01-01']\n",
    "    test = data[data[\"date\"] > '2019-01-01']\n",
    "    rf.fit(train[predictors],train[\"result\"])\n",
    "    preds = rf.predict(test[predictors])\n",
    "    combined = pd.DataFrame(dict(actual=test['result'], predicted = preds), index = test.index)\n",
    "    acc = accuracy_score(test['result'],preds)\n",
    "    return combined, acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "55b3c15e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:09.949396Z",
     "iopub.status.busy": "2025-02-11T19:36:09.949035Z",
     "iopub.status.idle": "2025-02-11T19:36:30.066499Z",
     "shell.execute_reply": "2025-02-11T19:36:30.065360Z"
    },
    "papermill": {
     "duration": 20.130268,
     "end_time": "2025-02-11T19:36:30.068375",
     "exception": false,
     "start_time": "2025-02-11T19:36:09.938107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combined, acc = make_predictions(matches_rolling, predictors + new_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "53e7789d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:30.089745Z",
     "iopub.status.busy": "2025-02-11T19:36:30.089374Z",
     "iopub.status.idle": "2025-02-11T19:36:30.094568Z",
     "shell.execute_reply": "2025-02-11T19:36:30.093710Z"
    },
    "papermill": {
     "duration": 0.017424,
     "end_time": "2025-02-11T19:36:30.095954",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.078530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48516320474777447"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c00021",
   "metadata": {
    "papermill": {
     "duration": 0.009614,
     "end_time": "2025-02-11T19:36:30.115560",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.105946",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This model was able to accurately predict match outcomes 48.52% of the time. This is a slight improvement over the last model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "293469a8",
   "metadata": {
    "papermill": {
     "duration": 0.009671,
     "end_time": "2025-02-11T19:36:30.135045",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.125374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**FROM CHATGPT: Ways to Improve Model**\n",
    "\n",
    "1️⃣ Feature Engineering – Add More Predictive Features\n",
    "Your current predictors only include rolling averages of team stats, which are useful but miss key contextual factors. Consider adding:\n",
    "\n",
    "✅ Advanced Team Performance Metrics\n",
    "Expected Goals Against (xGA) Rolling: Measures defensive performance.\n",
    "Form Streaks: Last 5-match form (WDLDD → convert to numeric values).\n",
    "Home/Away Strength: Some teams perform very differently at home vs. away.\n",
    "Rest Days: More rest can improve performance (days_since_last_match).\n",
    "✅ Squad Strength & Player Data\n",
    "Injuries & Suspensions: Missing key players can heavily impact results.\n",
    "Starting Lineup Strength: Use team ratings or FIFA/FBRef player values.\n",
    "Substitution Impact: Does the team benefit from impactful subs?\n",
    "✅ Contextual Match Information\n",
    "Weather Conditions: Rain, heat, and wind affect games.\n",
    "Match Importance: Friendly vs. Champions League final? Playoff implications?\n",
    "Team Budget/Market Value: Teams with higher budgets tend to win more.\n",
    "✅ Betting Odds & Market Signals\n",
    "Bookmaker Probabilities: Sportsbooks adjust odds using sophisticated models.\n",
    "Public Betting Data: Overbet teams often underperform.\n",
    "\n",
    "2️⃣ Model Tuning – Optimize Your Algorithm\n",
    "Increase Tree Depth (Random Forest/XGBoost): Allow deeper trees to capture interactions.\n",
    "Hyperparameter Tuning: Use GridSearchCV or RandomizedSearchCV to find optimal hyperparameters.\n",
    "Feature Selection: Some features may be hurting accuracy. Use:\n",
    "python\n",
    "Copy\n",
    "Edit\n",
    "from sklearn.feature_selection import RFECV\n",
    "selector = RFECV(model, step=1, cv=5)\n",
    "selector.fit(X_train, y_train)\n",
    "print(selector.support_)  # Identifies most important features\n",
    "\n",
    "4️⃣ Try More Advanced Models\n",
    "Your accuracy may be limited by Random Forest. Try:\n",
    "\n",
    "Gradient Boosting (XGBoost, LightGBM, CatBoost) – Handles structured data well.\n",
    "Neural Networks (Deep Learning) – If you have tons of data.\n",
    "Stacked Models – Combine multiple models for better performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bf42ac1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:30.156046Z",
     "iopub.status.busy": "2025-02-11T19:36:30.155669Z",
     "iopub.status.idle": "2025-02-11T19:36:30.171106Z",
     "shell.execute_reply": "2025-02-11T19:36:30.170153Z"
    },
    "papermill": {
     "duration": 0.027956,
     "end_time": "2025-02-11T19:36:30.172656",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.144700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>prediction</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2184</td>\n",
       "      <td>60</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1082</td>\n",
       "      <td>38</td>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1174</td>\n",
       "      <td>38</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "prediction     0   1    2\n",
       "actual                   \n",
       "0           2184  60  392\n",
       "1           1082  38  216\n",
       "2           1174  38  226"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined = pd.DataFrame(dict(actual=test['result'],prediction = preds))\n",
    "pd.crosstab(index=combined['actual'],columns=combined['prediction'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fb2f975",
   "metadata": {
    "papermill": {
     "duration": 0.010156,
     "end_time": "2025-02-11T19:36:30.195620",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.185464",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Build ML Model (Try 3)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "878f3bcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:30.217066Z",
     "iopub.status.busy": "2025-02-11T19:36:30.216706Z",
     "iopub.status.idle": "2025-02-11T19:36:30.233355Z",
     "shell.execute_reply": "2025-02-11T19:36:30.232524Z"
    },
    "papermill": {
     "duration": 0.029573,
     "end_time": "2025-02-11T19:36:30.235207",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.205634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "matches_rolling.columns\n",
    "home = matches_rolling[matches_rolling['home_away'] == 'Home']\n",
    "away = matches_rolling[matches_rolling['home_away'] == 'Away']\n",
    "away = away[['fixture_id','total_passes_rolling', 'completed_passes_rolling',\n",
    "       'pass_percentage_rolling', 'assists_rolling', 'goals_rolling',\n",
    "       'expected_goals_rolling', 'shots_on_goal_rolling',\n",
    "       'shots_off_goal_rolling', 'shots_insidebox_rolling',\n",
    "       'shots_outsidebox_rolling', 'total_shots_rolling',\n",
    "       'blocked_shots_rolling', 'fouls_rolling', 'corner_kicks_rolling',\n",
    "       'offsides_rolling', 'ball_possession_rolling', 'yellow_cards_rolling',\n",
    "       'red_cards_rolling', 'goalkeeper_saves_rolling',\n",
    "       'goals_prevented_rolling','days_since_last']]\n",
    "mls_stats = home.merge(away,left_on=['fixture_id'],right_on=['fixture_id'],how='left',suffixes=('_h','_a'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9fed469b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:30.257228Z",
     "iopub.status.busy": "2025-02-11T19:36:30.256891Z",
     "iopub.status.idle": "2025-02-11T19:36:30.284476Z",
     "shell.execute_reply": "2025-02-11T19:36:30.283414Z"
    },
    "papermill": {
     "duration": 0.040495,
     "end_time": "2025-02-11T19:36:30.286264",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.245769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixture_id</th>\n",
       "      <th>team_name</th>\n",
       "      <th>total_passes</th>\n",
       "      <th>completed_passes</th>\n",
       "      <th>pass_percentage</th>\n",
       "      <th>assists</th>\n",
       "      <th>goals</th>\n",
       "      <th>expected_goals</th>\n",
       "      <th>shots_on_goal</th>\n",
       "      <th>shots_off_goal</th>\n",
       "      <th>...</th>\n",
       "      <th>blocked_shots_rolling_a</th>\n",
       "      <th>fouls_rolling_a</th>\n",
       "      <th>corner_kicks_rolling_a</th>\n",
       "      <th>offsides_rolling_a</th>\n",
       "      <th>ball_possession_rolling_a</th>\n",
       "      <th>yellow_cards_rolling_a</th>\n",
       "      <th>red_cards_rolling_a</th>\n",
       "      <th>goalkeeper_saves_rolling_a</th>\n",
       "      <th>goals_prevented_rolling_a</th>\n",
       "      <th>days_since_last_a</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2835</th>\n",
       "      <td>128168</td>\n",
       "      <td>Philadelphia Union</td>\n",
       "      <td>503</td>\n",
       "      <td>410</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>3.333333</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>128169</td>\n",
       "      <td>Orlando City SC</td>\n",
       "      <td>446</td>\n",
       "      <td>358</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>5.333333</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>0.576667</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1253</th>\n",
       "      <td>128170</td>\n",
       "      <td>FC Dallas</td>\n",
       "      <td>641</td>\n",
       "      <td>544</td>\n",
       "      <td>0.85</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>16.666667</td>\n",
       "      <td>8.666667</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.573333</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>820</th>\n",
       "      <td>128171</td>\n",
       "      <td>Columbus Crew</td>\n",
       "      <td>552</td>\n",
       "      <td>432</td>\n",
       "      <td>0.78</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>8.333333</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.546667</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>92.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4034</th>\n",
       "      <td>128172</td>\n",
       "      <td>Vancouver Whitecaps</td>\n",
       "      <td>505</td>\n",
       "      <td>395</td>\n",
       "      <td>0.78</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>12.333333</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2768</th>\n",
       "      <td>1315362</td>\n",
       "      <td>Orlando City SC</td>\n",
       "      <td>470</td>\n",
       "      <td>405</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.33</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.666667</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.370000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1885</th>\n",
       "      <td>1315363</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>672</td>\n",
       "      <td>626</td>\n",
       "      <td>0.93</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>4.17</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>6.333333</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>3.333333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>3.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2769</th>\n",
       "      <td>1316662</td>\n",
       "      <td>Orlando City SC</td>\n",
       "      <td>455</td>\n",
       "      <td>362</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.99</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.270000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1886</th>\n",
       "      <td>1316663</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>557</td>\n",
       "      <td>503</td>\n",
       "      <td>0.90</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.84</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>6.333333</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.526667</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1887</th>\n",
       "      <td>1318600</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>386</td>\n",
       "      <td>290</td>\n",
       "      <td>0.75</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.82</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.303333</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4149 rows × 76 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixture_id            team_name  total_passes  completed_passes  \\\n",
       "2835      128168   Philadelphia Union           503               410   \n",
       "2667      128169      Orlando City SC           446               358   \n",
       "1253      128170            FC Dallas           641               544   \n",
       "820       128171        Columbus Crew           552               432   \n",
       "4034      128172  Vancouver Whitecaps           505               395   \n",
       "...          ...                  ...           ...               ...   \n",
       "2768     1315362      Orlando City SC           470               405   \n",
       "1885     1315363   Los Angeles Galaxy           672               626   \n",
       "2769     1316662      Orlando City SC           455               362   \n",
       "1886     1316663   Los Angeles Galaxy           557               503   \n",
       "1887     1318600   Los Angeles Galaxy           386               290   \n",
       "\n",
       "      pass_percentage  assists  goals  expected_goals  shots_on_goal  \\\n",
       "2835             0.82        0      1            0.00              4   \n",
       "2667             0.80        1      2            0.00              4   \n",
       "1253             0.85        1      1            0.00              3   \n",
       "820              0.78        1      1            0.00              4   \n",
       "4034             0.78        2      2            0.00              4   \n",
       "...               ...      ...    ...             ...            ...   \n",
       "2768             0.86        0      1            1.33              4   \n",
       "1885             0.93        6      6            4.17             10   \n",
       "2769             0.80        0      0            0.99              3   \n",
       "1886             0.90        1      1            0.84              5   \n",
       "1887             0.75        2      2            1.82              6   \n",
       "\n",
       "      shots_off_goal  ...  blocked_shots_rolling_a  fouls_rolling_a  \\\n",
       "2835               7  ...                 2.000000        11.000000   \n",
       "2667               4  ...                 4.000000        18.000000   \n",
       "1253               3  ...                 4.666667        16.666667   \n",
       "820                5  ...                 3.666667         8.333333   \n",
       "4034               2  ...                 2.666667        12.333333   \n",
       "...              ...  ...                      ...              ...   \n",
       "2768               8  ...                 3.000000         7.666667   \n",
       "1885               4  ...                 6.333333        12.000000   \n",
       "2769               4  ...                 3.666667        12.000000   \n",
       "1886               3  ...                 4.666667         9.000000   \n",
       "1887               6  ...                 4.666667        16.000000   \n",
       "\n",
       "      corner_kicks_rolling_a  offsides_rolling_a  ball_possession_rolling_a  \\\n",
       "2835                3.333333            2.000000                   0.500000   \n",
       "2667                5.333333            4.666667                   0.576667   \n",
       "1253                8.666667            1.666667                   0.573333   \n",
       "820                 5.000000            3.000000                   0.546667   \n",
       "4034                5.000000            3.000000                   0.466667   \n",
       "...                      ...                 ...                        ...   \n",
       "2768                5.000000            1.333333                   0.370000   \n",
       "1885                3.333333            1.000000                   0.400000   \n",
       "2769                4.333333            1.333333                   0.270000   \n",
       "1886                6.333333            1.666667                   0.526667   \n",
       "1887                3.666667            1.333333                   0.303333   \n",
       "\n",
       "      yellow_cards_rolling_a  red_cards_rolling_a  goalkeeper_saves_rolling_a  \\\n",
       "2835                0.666667             0.000000                    2.333333   \n",
       "2667                2.666667             0.000000                    1.666667   \n",
       "1253                1.666667             0.000000                    3.666667   \n",
       "820                 0.333333             0.000000                    3.333333   \n",
       "4034                1.333333             0.000000                    3.000000   \n",
       "...                      ...                  ...                         ...   \n",
       "2768                2.000000             0.000000                    6.000000   \n",
       "1885                3.333333             0.000000                    3.000000   \n",
       "2769                1.333333             0.000000                    6.000000   \n",
       "1886                2.333333             0.333333                    2.333333   \n",
       "1887                1.666667             0.000000                    6.000000   \n",
       "\n",
       "      goals_prevented_rolling_a  days_since_last_a  \n",
       "2835                   0.000000              124.0  \n",
       "2667                   0.000000              110.0  \n",
       "1253                   0.000000              125.0  \n",
       "820                    0.000000               92.0  \n",
       "4034                   0.000000              125.0  \n",
       "...                         ...                ...  \n",
       "2768                   0.333333               14.0  \n",
       "1885                   0.000000               35.0  \n",
       "2769                   0.666667                7.0  \n",
       "1886                   0.000000               42.0  \n",
       "1887                   0.666667                6.0  \n",
       "\n",
       "[4149 rows x 76 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mls_stats.sort_values('fixture_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7a749098",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:30.309375Z",
     "iopub.status.busy": "2025-02-11T19:36:30.309011Z",
     "iopub.status.idle": "2025-02-11T19:36:30.321253Z",
     "shell.execute_reply": "2025-02-11T19:36:30.320250Z"
    },
    "papermill": {
     "duration": 0.025409,
     "end_time": "2025-02-11T19:36:30.322759",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.297350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4149\n",
      "4122\n"
     ]
    }
   ],
   "source": [
    "other_mls_stats = mls_stats.dropna()\n",
    "print(mls_stats.shape[0])\n",
    "print(other_mls_stats.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "13d992f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:30.346671Z",
     "iopub.status.busy": "2025-02-11T19:36:30.346316Z",
     "iopub.status.idle": "2025-02-11T19:36:30.352658Z",
     "shell.execute_reply": "2025-02-11T19:36:30.351625Z"
    },
    "papermill": {
     "duration": 0.019846,
     "end_time": "2025-02-11T19:36:30.354296",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.334450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-34-7831fe003655>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  other_mls_stats['home_away'] = other_mls_stats['home_away'].astype(\"category\").cat.codes\n"
     ]
    }
   ],
   "source": [
    "other_mls_stats['home_away'] = other_mls_stats['home_away'].astype(\"category\").cat.codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "981d7af9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:30.376975Z",
     "iopub.status.busy": "2025-02-11T19:36:30.376602Z",
     "iopub.status.idle": "2025-02-11T19:36:44.059054Z",
     "shell.execute_reply": "2025-02-11T19:36:44.058097Z"
    },
    "papermill": {
     "duration": 13.695757,
     "end_time": "2025-02-11T19:36:44.060949",
     "exception": false,
     "start_time": "2025-02-11T19:36:30.365192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "new_cols_2 = [f\"{c}_h\" for c in new_cols] + [f\"{c}_a\" for c in new_cols]\n",
    "combined, acc = make_predictions(other_mls_stats, predictors + new_cols_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "09d63b81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:44.085472Z",
     "iopub.status.busy": "2025-02-11T19:36:44.085124Z",
     "iopub.status.idle": "2025-02-11T19:36:44.090677Z",
     "shell.execute_reply": "2025-02-11T19:36:44.089849Z"
    },
    "papermill": {
     "duration": 0.020045,
     "end_time": "2025-02-11T19:36:44.092251",
     "exception": false,
     "start_time": "2025-02-11T19:36:44.072206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48678823967249724"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "009deac4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:44.115646Z",
     "iopub.status.busy": "2025-02-11T19:36:44.115291Z",
     "iopub.status.idle": "2025-02-11T19:36:44.130201Z",
     "shell.execute_reply": "2025-02-11T19:36:44.129184Z"
    },
    "papermill": {
     "duration": 0.028275,
     "end_time": "2025-02-11T19:36:44.131745",
     "exception": false,
     "start_time": "2025-02-11T19:36:44.103470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>prediction</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2184</td>\n",
       "      <td>60</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1082</td>\n",
       "      <td>38</td>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1174</td>\n",
       "      <td>38</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "prediction     0   1    2\n",
       "actual                   \n",
       "0           2184  60  392\n",
       "1           1082  38  216\n",
       "2           1174  38  226"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined = pd.DataFrame(dict(actual=test['result'],prediction = preds))\n",
    "pd.crosstab(index=combined['actual'],columns=combined['prediction'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "09bbe42c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-11T19:36:44.209212Z",
     "iopub.status.busy": "2025-02-11T19:36:44.208827Z",
     "iopub.status.idle": "2025-02-11T19:36:44.233016Z",
     "shell.execute_reply": "2025-02-11T19:36:44.231936Z"
    },
    "papermill": {
     "duration": 0.091562,
     "end_time": "2025-02-11T19:36:44.234545",
     "exception": false,
     "start_time": "2025-02-11T19:36:44.142983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixture_id</th>\n",
       "      <th>team_name</th>\n",
       "      <th>total_passes</th>\n",
       "      <th>completed_passes</th>\n",
       "      <th>pass_percentage</th>\n",
       "      <th>assists</th>\n",
       "      <th>goals</th>\n",
       "      <th>expected_goals</th>\n",
       "      <th>shots_on_goal</th>\n",
       "      <th>shots_off_goal</th>\n",
       "      <th>...</th>\n",
       "      <th>blocked_shots_rolling_a</th>\n",
       "      <th>fouls_rolling_a</th>\n",
       "      <th>corner_kicks_rolling_a</th>\n",
       "      <th>offsides_rolling_a</th>\n",
       "      <th>ball_possession_rolling_a</th>\n",
       "      <th>yellow_cards_rolling_a</th>\n",
       "      <th>red_cards_rolling_a</th>\n",
       "      <th>goalkeeper_saves_rolling_a</th>\n",
       "      <th>goals_prevented_rolling_a</th>\n",
       "      <th>days_since_last_a</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>148006</td>\n",
       "      <td>Atlanta United FC</td>\n",
       "      <td>637</td>\n",
       "      <td>537</td>\n",
       "      <td>0.84</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>14.666667</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.423333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>148043</td>\n",
       "      <td>Atlanta United FC</td>\n",
       "      <td>467</td>\n",
       "      <td>373</td>\n",
       "      <td>0.80</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>15.666667</td>\n",
       "      <td>6.333333</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.473333</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>148057</td>\n",
       "      <td>Atlanta United FC</td>\n",
       "      <td>382</td>\n",
       "      <td>285</td>\n",
       "      <td>0.75</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>12.333333</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.573333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>148078</td>\n",
       "      <td>Atlanta United FC</td>\n",
       "      <td>458</td>\n",
       "      <td>364</td>\n",
       "      <td>0.79</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>148096</td>\n",
       "      <td>Atlanta United FC</td>\n",
       "      <td>570</td>\n",
       "      <td>460</td>\n",
       "      <td>0.81</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>3.333333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.450000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4144</th>\n",
       "      <td>491409</td>\n",
       "      <td>Whitecaps</td>\n",
       "      <td>417</td>\n",
       "      <td>345</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.503333</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4145</th>\n",
       "      <td>491423</td>\n",
       "      <td>Whitecaps</td>\n",
       "      <td>361</td>\n",
       "      <td>280</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>10.333333</td>\n",
       "      <td>5.666667</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.540000</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4146</th>\n",
       "      <td>491438</td>\n",
       "      <td>Whitecaps</td>\n",
       "      <td>469</td>\n",
       "      <td>374</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.486667</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4147</th>\n",
       "      <td>491457</td>\n",
       "      <td>Whitecaps</td>\n",
       "      <td>464</td>\n",
       "      <td>372</td>\n",
       "      <td>0.80</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.480000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4148</th>\n",
       "      <td>491114</td>\n",
       "      <td>Whitecaps</td>\n",
       "      <td>344</td>\n",
       "      <td>254</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.530000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4122 rows × 76 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixture_id          team_name  total_passes  completed_passes  \\\n",
       "0         148006  Atlanta United FC           637               537   \n",
       "1         148043  Atlanta United FC           467               373   \n",
       "2         148057  Atlanta United FC           382               285   \n",
       "3         148078  Atlanta United FC           458               364   \n",
       "4         148096  Atlanta United FC           570               460   \n",
       "...          ...                ...           ...               ...   \n",
       "4144      491409          Whitecaps           417               345   \n",
       "4145      491423          Whitecaps           361               280   \n",
       "4146      491438          Whitecaps           469               374   \n",
       "4147      491457          Whitecaps           464               372   \n",
       "4148      491114          Whitecaps           344               254   \n",
       "\n",
       "      pass_percentage  assists  goals  expected_goals  shots_on_goal  \\\n",
       "0                0.84        1      1             0.0              7   \n",
       "1                0.80        3      4             0.0              5   \n",
       "2                0.75        3      3             0.0              3   \n",
       "3                0.79        3      3             0.0              7   \n",
       "4                0.81        1      1             0.0              9   \n",
       "...               ...      ...    ...             ...            ...   \n",
       "4144             0.83        0      0             0.0              8   \n",
       "4145             0.78        0      1             0.0              6   \n",
       "4146             0.80        0      0             0.0              2   \n",
       "4147             0.80        3      3             0.0              6   \n",
       "4148             0.74        0      0             0.0              2   \n",
       "\n",
       "      shots_off_goal  ...  blocked_shots_rolling_a  fouls_rolling_a  \\\n",
       "0                 12  ...                 1.666667        14.666667   \n",
       "1                  3  ...                 2.666667        15.666667   \n",
       "2                  2  ...                 3.000000        12.333333   \n",
       "3                  5  ...                 2.666667        11.000000   \n",
       "4                  4  ...                 2.333333        15.000000   \n",
       "...              ...  ...                      ...              ...   \n",
       "4144               4  ...                 1.666667         0.000000   \n",
       "4145               9  ...                 3.666667        10.333333   \n",
       "4146               3  ...                 1.666667         0.000000   \n",
       "4147               3  ...                 2.333333         3.666667   \n",
       "4148               6  ...                 2.333333         4.666667   \n",
       "\n",
       "      corner_kicks_rolling_a  offsides_rolling_a  ball_possession_rolling_a  \\\n",
       "0                   6.000000            2.333333                   0.423333   \n",
       "1                   6.333333            1.666667                   0.473333   \n",
       "2                   4.000000            1.666667                   0.573333   \n",
       "3                   4.000000            1.666667                   0.600000   \n",
       "4                   3.333333            1.000000                   0.450000   \n",
       "...                      ...                 ...                        ...   \n",
       "4144                3.666667            3.000000                   0.503333   \n",
       "4145                5.666667            2.333333                   0.540000   \n",
       "4146                7.000000            1.666667                   0.486667   \n",
       "4147                4.000000            1.333333                   0.480000   \n",
       "4148                3.666667            1.333333                   0.530000   \n",
       "\n",
       "      yellow_cards_rolling_a  red_cards_rolling_a  goalkeeper_saves_rolling_a  \\\n",
       "0                   1.000000             0.000000                    4.333333   \n",
       "1                   3.000000             0.000000                    2.666667   \n",
       "2                   2.333333             0.000000                    3.000000   \n",
       "3                   0.666667             0.000000                    3.666667   \n",
       "4                   1.666667             0.000000                    3.333333   \n",
       "...                      ...                  ...                         ...   \n",
       "4144                2.000000             0.000000                    3.000000   \n",
       "4145                2.333333             0.000000                    5.333333   \n",
       "4146                0.333333             0.000000                    4.333333   \n",
       "4147                1.333333             0.333333                    3.666667   \n",
       "4148                1.666667             0.000000                    2.666667   \n",
       "\n",
       "      goals_prevented_rolling_a  days_since_last_a  \n",
       "0                           0.0                7.0  \n",
       "1                           0.0                3.0  \n",
       "2                           0.0                6.0  \n",
       "3                           0.0               13.0  \n",
       "4                           0.0                2.0  \n",
       "...                         ...                ...  \n",
       "4144                        0.0                6.0  \n",
       "4145                        0.0                7.0  \n",
       "4146                        0.0                3.0  \n",
       "4147                        0.0                7.0  \n",
       "4148                        0.0                7.0  \n",
       "\n",
       "[4122 rows x 76 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "other_mls_stats"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6318973,
     "sourceId": 10222081,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 55.476241,
   "end_time": "2025-02-11T19:36:44.967359",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-11T19:35:49.491118",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
