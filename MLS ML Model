{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "56ce2e99",
   "metadata": {
    "papermill": {
     "duration": 0.009461,
     "end_time": "2025-02-07T03:11:55.436386",
     "exception": false,
     "start_time": "2025-02-07T03:11:55.426925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Building MLS Predictive ML Model***"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14a8a521",
   "metadata": {
    "papermill": {
     "duration": 0.007549,
     "end_time": "2025-02-07T03:11:55.451979",
     "exception": false,
     "start_time": "2025-02-07T03:11:55.444430",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data Cleaning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "69ebecf0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:55.468356Z",
     "iopub.status.busy": "2025-02-07T03:11:55.467962Z",
     "iopub.status.idle": "2025-02-07T03:11:56.445447Z",
     "shell.execute_reply": "2025-02-07T03:11:56.444417Z"
    },
    "papermill": {
     "duration": 0.987778,
     "end_time": "2025-02-07T03:11:56.447554",
     "exception": false,
     "start_time": "2025-02-07T03:11:55.459776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import Necessary Packages\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ae2b2cce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:56.463943Z",
     "iopub.status.busy": "2025-02-07T03:11:56.463418Z",
     "iopub.status.idle": "2025-02-07T03:11:57.389344Z",
     "shell.execute_reply": "2025-02-07T03:11:57.388110Z"
    },
    "papermill": {
     "duration": 0.936283,
     "end_time": "2025-02-07T03:11:57.391521",
     "exception": false,
     "start_time": "2025-02-07T03:11:56.455238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-2-53af791da475>:3: DtypeWarning: Columns (24,28) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  mls_stats = pd.read_csv(\"/kaggle/input/football-match-statistics-and-more/fixture_stats_clean.csv\")\n"
     ]
    }
   ],
   "source": [
    "# Import both datasets\n",
    "mls_games = pd.read_csv(\"/kaggle/input/football-match-statistics-and-more/fixture_stats_teams_clean.csv\")\n",
    "mls_stats = pd.read_csv(\"/kaggle/input/football-match-statistics-and-more/fixture_stats_clean.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f2e3e5a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.407699Z",
     "iopub.status.busy": "2025-02-07T03:11:57.407330Z",
     "iopub.status.idle": "2025-02-07T03:11:57.505436Z",
     "shell.execute_reply": "2025-02-07T03:11:57.504473Z"
    },
    "papermill": {
     "duration": 0.108206,
     "end_time": "2025-02-07T03:11:57.507323",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.399117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge Datasets\n",
    "mls_games = mls_games.merge(mls_stats,left_on=['fixture_id'],right_on=['fixture_id'],how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb55050b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.523756Z",
     "iopub.status.busy": "2025-02-07T03:11:57.523346Z",
     "iopub.status.idle": "2025-02-07T03:11:57.538486Z",
     "shell.execute_reply": "2025-02-07T03:11:57.537394Z"
    },
    "papermill": {
     "duration": 0.025318,
     "end_time": "2025-02-07T03:11:57.540333",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.515015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mls_stats = mls_games[mls_games['league_name'] == 'Major League Soccer']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "33e6848d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.556670Z",
     "iopub.status.busy": "2025-02-07T03:11:57.556287Z",
     "iopub.status.idle": "2025-02-07T03:11:57.723273Z",
     "shell.execute_reply": "2025-02-07T03:11:57.722073Z"
    },
    "papermill": {
     "duration": 0.177341,
     "end_time": "2025-02-07T03:11:57.725375",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.548034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-5baafcb0808b>:1: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:2: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].fillna(False)\n",
      "<ipython-input-5-5baafcb0808b>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].astype(bool)\n",
      "<ipython-input-5-5baafcb0808b>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].astype(bool)\n",
      "<ipython-input-5-5baafcb0808b>:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['result'] = mls_stats.apply(match_result,axis = 1)\n",
      "<ipython-input-5-5baafcb0808b>:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  mls_stats['home_away'] = mls_stats.apply(home_away,axis = 1)\n"
     ]
    }
   ],
   "source": [
    "mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].fillna(False)\n",
    "mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].fillna(False)\n",
    "mls_stats['teams_home_winner'] = mls_stats['teams_home_winner'].astype(bool)\n",
    "mls_stats['teams_away_winner'] = mls_stats['teams_away_winner'].astype(bool)\n",
    "\n",
    "def match_result(row):\n",
    "    if row['teams_home_winner'] == True:\n",
    "        return 0 # equals home win\n",
    "    elif row['teams_away_winner'] == True:\n",
    "        return 2 # equals away win\n",
    "    else:\n",
    "        return 1 # draw\n",
    "\n",
    "def home_away(row):\n",
    "    is_home = row['teams_home_name'] == row['team_name']\n",
    "    if is_home:\n",
    "        return 'Home'\n",
    "    else:\n",
    "        return 'Away'\n",
    "\n",
    "# Add column for predictor label\n",
    "mls_stats['result'] = mls_stats.apply(match_result,axis = 1)\n",
    "mls_stats['home_away'] = mls_stats.apply(home_away,axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c9bc0aca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.743239Z",
     "iopub.status.busy": "2025-02-07T03:11:57.742830Z",
     "iopub.status.idle": "2025-02-07T03:11:57.750635Z",
     "shell.execute_reply": "2025-02-07T03:11:57.749514Z"
    },
    "papermill": {
     "duration": 0.018751,
     "end_time": "2025-02-07T03:11:57.752423",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.733672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop unnecessary columns\n",
    "mls_stats = mls_stats.drop(columns = ['team_id', 'team_logo',\n",
    "       'fixture_timezone', 'fixture_timestamp', 'fixture_periods_first',\n",
    "       'fixture_periods_second', 'fixture_referee', 'fixture_venue_id',\n",
    "       'fixture_venue_name', 'fixture_venue_city', 'fixture_status_long',\n",
    "       'fixture_status_short', 'fixture_status_elapsed',\n",
    "       'fixture_status_extra', 'league_id', 'league_name', 'league_country',\n",
    "       'league_logo', 'league_flag', 'league_season',\n",
    "       'teams_home_id',  'teams_home_logo',\n",
    "       'teams_home_winner', 'teams_away_id', \n",
    "       'teams_away_logo', 'teams_away_winner', 'goals_home', 'goals_away',\n",
    "       'score_halftime_home', 'score_halftime_away', 'score_fulltime_home',\n",
    "       'score_fulltime_away', 'score_extratime_home', 'score_extratime_away',\n",
    "       'score_penalty_home', 'score_penalty_away'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8499a320",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.769131Z",
     "iopub.status.busy": "2025-02-07T03:11:57.768730Z",
     "iopub.status.idle": "2025-02-07T03:11:57.775866Z",
     "shell.execute_reply": "2025-02-07T03:11:57.774812Z"
    },
    "papermill": {
     "duration": 0.017284,
     "end_time": "2025-02-07T03:11:57.777525",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.760241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fixture_id', 'team_name', 'total_passes', 'completed_passes',\n",
       "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
       "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
       "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
       "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
       "       'red_cards', 'goalkeeper_saves', 'goals_prevented', 'fixture_date',\n",
       "       'league_round', 'teams_home_name', 'teams_away_name', 'result',\n",
       "       'home_away'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mls_stats.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "79480878",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.794171Z",
     "iopub.status.busy": "2025-02-07T03:11:57.793823Z",
     "iopub.status.idle": "2025-02-07T03:11:57.810442Z",
     "shell.execute_reply": "2025-02-07T03:11:57.809220Z"
    },
    "papermill": {
     "duration": 0.02682,
     "end_time": "2025-02-07T03:11:57.812147",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.785327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "mls_stats['fixture_date'] = mls_stats['fixture_date'].str.replace(\" UTC\",\"\")\n",
    "mls_stats['date'] = pd.to_datetime(mls_stats['fixture_date'],format='%Y-%m-%d %H:%M:%S', errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6c0cec56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.828928Z",
     "iopub.status.busy": "2025-02-07T03:11:57.828474Z",
     "iopub.status.idle": "2025-02-07T03:11:57.846769Z",
     "shell.execute_reply": "2025-02-07T03:11:57.845490Z"
    },
    "papermill": {
     "duration": 0.028902,
     "end_time": "2025-02-07T03:11:57.848868",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.819966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "mls_stats['team_code'] = mls_stats['team_name'].astype(\"category\").cat.codes\n",
    "mls_stats['home_code'] = mls_stats['teams_home_name'].astype(\"category\").cat.codes\n",
    "mls_stats['away_code'] = mls_stats['teams_away_name'].astype(\"category\").cat.codes\n",
    "mls_stats['hour'] = mls_stats[\"date\"].dt.to_period('h').astype(int)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "69390bc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.865814Z",
     "iopub.status.busy": "2025-02-07T03:11:57.865410Z",
     "iopub.status.idle": "2025-02-07T03:11:57.871234Z",
     "shell.execute_reply": "2025-02-07T03:11:57.870119Z"
    },
    "papermill": {
     "duration": 0.016398,
     "end_time": "2025-02-07T03:11:57.873142",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.856744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mls_stats['dayofweek'] = mls_stats['date'].dt.dayofweek"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "25d05fef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.890802Z",
     "iopub.status.busy": "2025-02-07T03:11:57.890316Z",
     "iopub.status.idle": "2025-02-07T03:11:57.899192Z",
     "shell.execute_reply": "2025-02-07T03:11:57.898027Z"
    },
    "papermill": {
     "duration": 0.019914,
     "end_time": "2025-02-07T03:11:57.901204",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.881290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mls_stats = mls_stats.sort_values(\"date\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "248d24fa",
   "metadata": {
    "papermill": {
     "duration": 0.0075,
     "end_time": "2025-02-07T03:11:57.916924",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.909424",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Build ML Model (Try 1)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ddaef271",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:57.933401Z",
     "iopub.status.busy": "2025-02-07T03:11:57.933070Z",
     "iopub.status.idle": "2025-02-07T03:11:59.843264Z",
     "shell.execute_reply": "2025-02-07T03:11:59.842140Z"
    },
    "papermill": {
     "duration": 1.920672,
     "end_time": "2025-02-07T03:11:59.845173",
     "exception": false,
     "start_time": "2025-02-07T03:11:57.924501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8436b47f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:59.862320Z",
     "iopub.status.busy": "2025-02-07T03:11:59.861784Z",
     "iopub.status.idle": "2025-02-07T03:11:59.866811Z",
     "shell.execute_reply": "2025-02-07T03:11:59.865653Z"
    },
    "papermill": {
     "duration": 0.015844,
     "end_time": "2025-02-07T03:11:59.868771",
     "exception": false,
     "start_time": "2025-02-07T03:11:59.852927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier(n_estimators = 2500, min_samples_split=10, random_state = 1,criterion='gini')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b850ca10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:59.885886Z",
     "iopub.status.busy": "2025-02-07T03:11:59.885498Z",
     "iopub.status.idle": "2025-02-07T03:11:59.894533Z",
     "shell.execute_reply": "2025-02-07T03:11:59.893394Z"
    },
    "papermill": {
     "duration": 0.019423,
     "end_time": "2025-02-07T03:11:59.896538",
     "exception": false,
     "start_time": "2025-02-07T03:11:59.877115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = mls_stats[mls_stats[\"date\"] < '2019-01-01']\n",
    "test = mls_stats[mls_stats[\"date\"] > '2019-01-01']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b2d0d52d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:59.913251Z",
     "iopub.status.busy": "2025-02-07T03:11:59.912869Z",
     "iopub.status.idle": "2025-02-07T03:11:59.919488Z",
     "shell.execute_reply": "2025-02-07T03:11:59.918403Z"
    },
    "papermill": {
     "duration": 0.016861,
     "end_time": "2025-02-07T03:11:59.921313",
     "exception": false,
     "start_time": "2025-02-07T03:11:59.904452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fixture_id', 'team_name', 'total_passes', 'completed_passes',\n",
       "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
       "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
       "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
       "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
       "       'red_cards', 'goalkeeper_saves', 'goals_prevented', 'fixture_date',\n",
       "       'league_round', 'teams_home_name', 'teams_away_name', 'result',\n",
       "       'home_away', 'date', 'team_code', 'home_code', 'away_code', 'hour',\n",
       "       'dayofweek'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mls_stats.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75003f43",
   "metadata": {
    "papermill": {
     "duration": 0.00808,
     "end_time": "2025-02-07T03:11:59.937290",
     "exception": false,
     "start_time": "2025-02-07T03:11:59.929210",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For this first try, I tried using 4 simple predictors: home team name, away team name, hour of the day, day of the week."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2ad797c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:11:59.959978Z",
     "iopub.status.busy": "2025-02-07T03:11:59.959618Z",
     "iopub.status.idle": "2025-02-07T03:12:11.812441Z",
     "shell.execute_reply": "2025-02-07T03:12:11.811340Z"
    },
    "papermill": {
     "duration": 11.865498,
     "end_time": "2025-02-07T03:12:11.814190",
     "exception": false,
     "start_time": "2025-02-07T03:11:59.948692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(min_samples_split=10, n_estimators=2500, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(min_samples_split=10, n_estimators=2500, random_state=1)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(min_samples_split=10, n_estimators=2500, random_state=1)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictors = ['home_code','away_code','hour','dayofweek']\n",
    "rf.fit(train[predictors],train[\"result\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9d461079",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:11.831374Z",
     "iopub.status.busy": "2025-02-07T03:12:11.831016Z",
     "iopub.status.idle": "2025-02-07T03:12:13.198958Z",
     "shell.execute_reply": "2025-02-07T03:12:13.197801Z"
    },
    "papermill": {
     "duration": 1.378466,
     "end_time": "2025-02-07T03:12:13.200749",
     "exception": false,
     "start_time": "2025-02-07T03:12:11.822283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.45249537892791125"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = rf.predict(test[predictors])\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc = accuracy_score(test['result'],preds)\n",
    "acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f47a1f63",
   "metadata": {
    "papermill": {
     "duration": 0.007463,
     "end_time": "2025-02-07T03:12:13.216432",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.208969",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This yielded an accuracy of 45.25%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e8775dba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.233486Z",
     "iopub.status.busy": "2025-02-07T03:12:13.233142Z",
     "iopub.status.idle": "2025-02-07T03:12:13.265277Z",
     "shell.execute_reply": "2025-02-07T03:12:13.264165Z"
    },
    "papermill": {
     "duration": 0.042908,
     "end_time": "2025-02-07T03:12:13.267250",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.224342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>prediction</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2184</td>\n",
       "      <td>60</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1082</td>\n",
       "      <td>38</td>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1174</td>\n",
       "      <td>38</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "prediction     0   1    2\n",
       "actual                   \n",
       "0           2184  60  392\n",
       "1           1082  38  216\n",
       "2           1174  38  226"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined = pd.DataFrame(dict(actual=test['result'],prediction = preds))\n",
    "pd.crosstab(index=combined['actual'],columns=combined['prediction'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af967116",
   "metadata": {
    "papermill": {
     "duration": 0.008237,
     "end_time": "2025-02-07T03:12:13.284013",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.275776",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Build ML Model (Try 2)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d84374a6",
   "metadata": {
    "papermill": {
     "duration": 0.008332,
     "end_time": "2025-02-07T03:12:13.300969",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.292637",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This time, we will try to incorporate rolling statistics into the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6cdc3055",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.318512Z",
     "iopub.status.busy": "2025-02-07T03:12:13.318172Z",
     "iopub.status.idle": "2025-02-07T03:12:13.325466Z",
     "shell.execute_reply": "2025-02-07T03:12:13.324264Z"
    },
    "papermill": {
     "duration": 0.018226,
     "end_time": "2025-02-07T03:12:13.327443",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.309217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grouped_matches = mls_stats.groupby(\"team_name\")\n",
    "group = grouped_matches.get_group(\"Portland Timbers\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "56f38097",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.345285Z",
     "iopub.status.busy": "2025-02-07T03:12:13.344889Z",
     "iopub.status.idle": "2025-02-07T03:12:13.349787Z",
     "shell.execute_reply": "2025-02-07T03:12:13.348734Z"
    },
    "papermill": {
     "duration": 0.015506,
     "end_time": "2025-02-07T03:12:13.351426",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.335920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def rolling_average(group,cols,new_cols):\n",
    "    group = group.sort_values(\"date\")\n",
    "    rolling_stats = group[cols].rolling(3, closed='left').mean()\n",
    "    group[new_cols] = rolling_stats\n",
    "    group = group.dropna(subset=new_cols)\n",
    "    return group"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3446af9",
   "metadata": {
    "papermill": {
     "duration": 0.007568,
     "end_time": "2025-02-07T03:12:13.367495",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.359927",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Many more predictors are being used this time, as seen below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e0f3ca85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.385218Z",
     "iopub.status.busy": "2025-02-07T03:12:13.384778Z",
     "iopub.status.idle": "2025-02-07T03:12:13.391243Z",
     "shell.execute_reply": "2025-02-07T03:12:13.389980Z"
    },
    "papermill": {
     "duration": 0.017465,
     "end_time": "2025-02-07T03:12:13.393118",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.375653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['fixture_id', 'team_name', 'total_passes', 'completed_passes',\n",
      "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
      "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
      "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
      "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
      "       'red_cards', 'goalkeeper_saves', 'goals_prevented', 'fixture_date',\n",
      "       'league_round', 'teams_home_name', 'teams_away_name', 'result',\n",
      "       'home_away', 'date', 'team_code', 'home_code', 'away_code', 'hour',\n",
      "       'dayofweek'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(mls_stats.columns)\n",
    "cols = ['total_passes', 'completed_passes',\n",
    "       'pass_percentage', 'assists', 'goals', 'expected_goals',\n",
    "       'shots_on_goal', 'shots_off_goal', 'shots_insidebox',\n",
    "       'shots_outsidebox', 'total_shots', 'blocked_shots', 'fouls',\n",
    "       'corner_kicks', 'offsides', 'ball_possession', 'yellow_cards',\n",
    "       'red_cards', 'goalkeeper_saves', 'goals_prevented']\n",
    "\n",
    "new_cols = [f\"{c}_rolling\" for c in cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "83509b26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.412860Z",
     "iopub.status.busy": "2025-02-07T03:12:13.412403Z",
     "iopub.status.idle": "2025-02-07T03:12:13.458616Z",
     "shell.execute_reply": "2025-02-07T03:12:13.457453Z"
    },
    "papermill": {
     "duration": 0.057346,
     "end_time": "2025-02-07T03:12:13.460424",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.403078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixture_id</th>\n",
       "      <th>team_name</th>\n",
       "      <th>total_passes</th>\n",
       "      <th>completed_passes</th>\n",
       "      <th>pass_percentage</th>\n",
       "      <th>assists</th>\n",
       "      <th>goals</th>\n",
       "      <th>expected_goals</th>\n",
       "      <th>shots_on_goal</th>\n",
       "      <th>shots_off_goal</th>\n",
       "      <th>...</th>\n",
       "      <th>teams_home_name</th>\n",
       "      <th>teams_away_name</th>\n",
       "      <th>result</th>\n",
       "      <th>home_away</th>\n",
       "      <th>date</th>\n",
       "      <th>team_code</th>\n",
       "      <th>home_code</th>\n",
       "      <th>away_code</th>\n",
       "      <th>hour</th>\n",
       "      <th>dayofweek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>53110</th>\n",
       "      <td>491123</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>465</td>\n",
       "      <td>381</td>\n",
       "      <td>0.82</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Chicago Fire</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2015-03-07 03:00:00</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>396027</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17194</th>\n",
       "      <td>491123</td>\n",
       "      <td>Chicago Fire</td>\n",
       "      <td>427</td>\n",
       "      <td>332</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Chicago Fire</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2015-03-07 03:00:00</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>396027</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17752</th>\n",
       "      <td>491124</td>\n",
       "      <td>CF Montreal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>DC United</td>\n",
       "      <td>CF Montreal</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2015-03-07 20:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>396044</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17831</th>\n",
       "      <td>491124</td>\n",
       "      <td>DC United</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>DC United</td>\n",
       "      <td>CF Montreal</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2015-03-07 20:00:00</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>396044</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17421</th>\n",
       "      <td>491125</td>\n",
       "      <td>Colorado Rapids</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Philadelphia Union</td>\n",
       "      <td>Colorado Rapids</td>\n",
       "      <td>1</td>\n",
       "      <td>Away</td>\n",
       "      <td>2015-03-07 21:00:00</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>5</td>\n",
       "      <td>396045</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37799</th>\n",
       "      <td>1316662</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>303</td>\n",
       "      <td>216</td>\n",
       "      <td>0.71</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.78</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Orlando City SC</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>2</td>\n",
       "      <td>Away</td>\n",
       "      <td>2024-12-01 00:30:00</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>18</td>\n",
       "      <td>481392</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38134</th>\n",
       "      <td>1316663</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>557</td>\n",
       "      <td>503</td>\n",
       "      <td>0.90</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.84</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Seattle Sounders</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2024-12-01 03:00:00</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>481395</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16178</th>\n",
       "      <td>1316663</td>\n",
       "      <td>Seattle Sounders</td>\n",
       "      <td>461</td>\n",
       "      <td>408</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.41</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>Seattle Sounders</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2024-12-01 03:00:00</td>\n",
       "      <td>24</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>481395</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53188</th>\n",
       "      <td>1318600</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>386</td>\n",
       "      <td>290</td>\n",
       "      <td>0.75</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.82</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>0</td>\n",
       "      <td>Home</td>\n",
       "      <td>2024-12-07 21:00:00</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>481557</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37794</th>\n",
       "      <td>1318600</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>543</td>\n",
       "      <td>441</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.91</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>Los Angeles Galaxy</td>\n",
       "      <td>New York Red Bulls</td>\n",
       "      <td>0</td>\n",
       "      <td>Away</td>\n",
       "      <td>2024-12-07 21:00:00</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>481557</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8380 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       fixture_id           team_name  total_passes  completed_passes  \\\n",
       "53110      491123  Los Angeles Galaxy           465               381   \n",
       "17194      491123        Chicago Fire           427               332   \n",
       "17752      491124         CF Montreal             0                 0   \n",
       "17831      491124           DC United             0                 0   \n",
       "17421      491125     Colorado Rapids             0                 0   \n",
       "...           ...                 ...           ...               ...   \n",
       "37799     1316662  New York Red Bulls           303               216   \n",
       "38134     1316663  Los Angeles Galaxy           557               503   \n",
       "16178     1316663    Seattle Sounders           461               408   \n",
       "53188     1318600  Los Angeles Galaxy           386               290   \n",
       "37794     1318600  New York Red Bulls           543               441   \n",
       "\n",
       "       pass_percentage  assists  goals  expected_goals  shots_on_goal  \\\n",
       "53110             0.82        1      2            0.00              5   \n",
       "17194             0.78        0      0            0.00              1   \n",
       "17752             0.00        0      0            0.00              3   \n",
       "17831             0.00        0      0            0.00              4   \n",
       "17421             0.00        0      0            0.00              0   \n",
       "...                ...      ...    ...             ...            ...   \n",
       "37799             0.71        1      1            0.78              1   \n",
       "38134             0.90        1      1            0.84              5   \n",
       "16178             0.89        0      0            0.41              4   \n",
       "53188             0.75        2      2            1.82              6   \n",
       "37794             0.81        0      1            0.91              3   \n",
       "\n",
       "       shots_off_goal  ...     teams_home_name     teams_away_name  result  \\\n",
       "53110               7  ...  Los Angeles Galaxy        Chicago Fire       0   \n",
       "17194               3  ...  Los Angeles Galaxy        Chicago Fire       0   \n",
       "17752               6  ...           DC United         CF Montreal       0   \n",
       "17831               5  ...           DC United         CF Montreal       0   \n",
       "17421               2  ...  Philadelphia Union     Colorado Rapids       1   \n",
       "...               ...  ...                 ...                 ...     ...   \n",
       "37799               2  ...     Orlando City SC  New York Red Bulls       2   \n",
       "38134               3  ...  Los Angeles Galaxy    Seattle Sounders       0   \n",
       "16178               1  ...  Los Angeles Galaxy    Seattle Sounders       0   \n",
       "53188               6  ...  Los Angeles Galaxy  New York Red Bulls       0   \n",
       "37794               3  ...  Los Angeles Galaxy  New York Red Bulls       0   \n",
       "\n",
       "       home_away                date  team_code  home_code  away_code    hour  \\\n",
       "53110       Home 2015-03-07 03:00:00         13         13          4  396027   \n",
       "17194       Away 2015-03-07 03:00:00          4         13          4  396027   \n",
       "17752       Away 2015-03-07 20:00:00          2          7          2  396044   \n",
       "17831       Home 2015-03-07 20:00:00          7          7          2  396044   \n",
       "17421       Away 2015-03-07 21:00:00          5         20          5  396045   \n",
       "...          ...                 ...        ...        ...        ...     ...   \n",
       "37799       Away 2024-12-01 00:30:00         18         19         18  481392   \n",
       "38134       Home 2024-12-01 03:00:00         13         13         24  481395   \n",
       "16178       Away 2024-12-01 03:00:00         24         13         24  481395   \n",
       "53188       Home 2024-12-07 21:00:00         13         13         18  481557   \n",
       "37794       Away 2024-12-07 21:00:00         18         13         18  481557   \n",
       "\n",
       "       dayofweek  \n",
       "53110          5  \n",
       "17194          5  \n",
       "17752          5  \n",
       "17831          5  \n",
       "17421          5  \n",
       "...          ...  \n",
       "37799          6  \n",
       "38134          6  \n",
       "16178          6  \n",
       "53188          5  \n",
       "37794          5  \n",
       "\n",
       "[8380 rows x 34 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rolling_average(group,cols,new_cols)\n",
    "mls_stats = mls_stats.sort_values('date')\n",
    "mls_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3ad3cdae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.479423Z",
     "iopub.status.busy": "2025-02-07T03:12:13.478991Z",
     "iopub.status.idle": "2025-02-07T03:12:13.828163Z",
     "shell.execute_reply": "2025-02-07T03:12:13.826991Z"
    },
    "papermill": {
     "duration": 0.360633,
     "end_time": "2025-02-07T03:12:13.830036",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.469403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-23-5fba18931882>:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  matches_rolling = mls_stats.groupby(\"team_name\").apply(lambda x: rolling_average(x,cols,new_cols))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "matches_rolling = mls_stats.groupby(\"team_name\").apply(lambda x: rolling_average(x,cols,new_cols))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8473ec8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.848956Z",
     "iopub.status.busy": "2025-02-07T03:12:13.848530Z",
     "iopub.status.idle": "2025-02-07T03:12:13.863394Z",
     "shell.execute_reply": "2025-02-07T03:12:13.862203Z"
    },
    "papermill": {
     "duration": 0.026314,
     "end_time": "2025-02-07T03:12:13.865368",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.839054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "matches_rolling = matches_rolling.droplevel('team_name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ff34bfe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.885524Z",
     "iopub.status.busy": "2025-02-07T03:12:13.885113Z",
     "iopub.status.idle": "2025-02-07T03:12:13.901254Z",
     "shell.execute_reply": "2025-02-07T03:12:13.899687Z"
    },
    "papermill": {
     "duration": 0.028061,
     "end_time": "2025-02-07T03:12:13.903073",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.875012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      fixture_id          team_name  total_passes  completed_passes  \\\n",
      "0         147953  Atlanta United FC           485               384   \n",
      "1         147967  Atlanta United FC           413               307   \n",
      "2         147976  Atlanta United FC           330               238   \n",
      "3         147992  Atlanta United FC           322               214   \n",
      "4         148006  Atlanta United FC           637               537   \n",
      "...          ...                ...           ...               ...   \n",
      "8279      491438          Whitecaps           469               374   \n",
      "8280      491441          Whitecaps           425               337   \n",
      "8281      491457          Whitecaps           464               372   \n",
      "8282      491113          Whitecaps           343               232   \n",
      "8283      491114          Whitecaps           344               254   \n",
      "\n",
      "      pass_percentage  assists  goals  expected_goals  shots_on_goal  \\\n",
      "0                0.79        0      0             0.0              3   \n",
      "1                0.74        2      2             0.0              5   \n",
      "2                0.72        1      1             0.0              1   \n",
      "3                0.66        2      3             0.0              6   \n",
      "4                0.84        1      1             0.0              7   \n",
      "...               ...      ...    ...             ...            ...   \n",
      "8279             0.80        0      0             0.0              2   \n",
      "8280             0.79        0      0             0.0              1   \n",
      "8281             0.80        3      3             0.0              6   \n",
      "8282             0.68        0      0             0.0              3   \n",
      "8283             0.74        0      0             0.0              2   \n",
      "\n",
      "      shots_off_goal  ...  total_shots_rolling  blocked_shots_rolling  \\\n",
      "0                  4  ...            12.666667               2.000000   \n",
      "1                  1  ...            11.666667               1.666667   \n",
      "2                  3  ...            10.333333               1.666667   \n",
      "3                  2  ...             7.666667               2.000000   \n",
      "4                 12  ...             7.000000               1.000000   \n",
      "...              ...  ...                  ...                    ...   \n",
      "8279               3  ...            15.000000               2.666667   \n",
      "8280               6  ...            12.333333               2.333333   \n",
      "8281               3  ...             9.666667               2.333333   \n",
      "8282               4  ...             9.000000               2.000000   \n",
      "8283               6  ...             9.666667               2.000000   \n",
      "\n",
      "      fouls_rolling  corner_kicks_rolling  offsides_rolling  \\\n",
      "0         12.666667              6.333333          2.666667   \n",
      "1         13.000000              5.666667          1.666667   \n",
      "2         12.666667              5.666667          1.666667   \n",
      "3         13.000000              3.000000          2.333333   \n",
      "4         11.666667              3.000000          3.333333   \n",
      "...             ...                   ...               ...   \n",
      "8279       0.000000              5.666667          1.666667   \n",
      "8280       0.000000              6.666667          2.000000   \n",
      "8281       4.333333              5.666667          2.333333   \n",
      "8282       4.333333              5.333333          3.333333   \n",
      "8283       4.333333              4.666667          2.666667   \n",
      "\n",
      "      ball_possession_rolling  yellow_cards_rolling  red_cards_rolling  \\\n",
      "0                    0.626667              1.666667           0.333333   \n",
      "1                    0.610000              2.000000           0.000000   \n",
      "2                    0.600000              2.000000           0.333333   \n",
      "3                    0.476667              1.666667           0.666667   \n",
      "4                    0.460000              2.333333           0.666667   \n",
      "...                       ...                   ...                ...   \n",
      "8279                 0.463333              2.333333           0.000000   \n",
      "8280                 0.493333              1.333333           0.000000   \n",
      "8281                 0.510000              1.333333           0.000000   \n",
      "8282                 0.526667              1.000000           0.000000   \n",
      "8283                 0.483333              1.333333           0.000000   \n",
      "\n",
      "      goalkeeper_saves_rolling  goals_prevented_rolling  \n",
      "0                     4.333333                      0.0  \n",
      "1                     3.333333                      0.0  \n",
      "2                     3.666667                      0.0  \n",
      "3                     3.666667                      0.0  \n",
      "4                     3.666667                      0.0  \n",
      "...                        ...                      ...  \n",
      "8279                  3.333333                      0.0  \n",
      "8280                  4.000000                      0.0  \n",
      "8281                  3.333333                      0.0  \n",
      "8282                  3.333333                      0.0  \n",
      "8283                  4.000000                      0.0  \n",
      "\n",
      "[8284 rows x 54 columns]\n"
     ]
    }
   ],
   "source": [
    "matches_rolling.index = range(matches_rolling.shape[0])\n",
    "print(matches_rolling)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c8853a8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.922436Z",
     "iopub.status.busy": "2025-02-07T03:12:13.922085Z",
     "iopub.status.idle": "2025-02-07T03:12:13.927737Z",
     "shell.execute_reply": "2025-02-07T03:12:13.926559Z"
    },
    "papermill": {
     "duration": 0.017478,
     "end_time": "2025-02-07T03:12:13.929684",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.912206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def make_predictions(data, predictors):\n",
    "    train = data[data[\"date\"] < '2019-01-01']\n",
    "    test = data[data[\"date\"] > '2019-01-01']\n",
    "    rf.fit(train[predictors],train[\"result\"])\n",
    "    preds = rf.predict(test[predictors])\n",
    "    combined = pd.DataFrame(dict(actual=test['result'], predicted = preds), index = test.index)\n",
    "    acc = accuracy_score(test['result'],preds)\n",
    "    return combined, acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a36ac97d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:13.949687Z",
     "iopub.status.busy": "2025-02-07T03:12:13.949275Z",
     "iopub.status.idle": "2025-02-07T03:12:34.724298Z",
     "shell.execute_reply": "2025-02-07T03:12:34.723222Z"
    },
    "papermill": {
     "duration": 20.787055,
     "end_time": "2025-02-07T03:12:34.726266",
     "exception": false,
     "start_time": "2025-02-07T03:12:13.939211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combined, acc = make_predictions(matches_rolling, predictors + new_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2752352f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:34.745735Z",
     "iopub.status.busy": "2025-02-07T03:12:34.745338Z",
     "iopub.status.idle": "2025-02-07T03:12:34.751205Z",
     "shell.execute_reply": "2025-02-07T03:12:34.750112Z"
    },
    "papermill": {
     "duration": 0.017554,
     "end_time": "2025-02-07T03:12:34.753006",
     "exception": false,
     "start_time": "2025-02-07T03:12:34.735452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48516320474777447"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f06fad23",
   "metadata": {
    "papermill": {
     "duration": 0.008686,
     "end_time": "2025-02-07T03:12:34.771087",
     "exception": false,
     "start_time": "2025-02-07T03:12:34.762401",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This model was able to accurately predict match outcomes 48.52% of the time. This is a slight improvement over the last model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "393ae8ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:34.790498Z",
     "iopub.status.busy": "2025-02-07T03:12:34.790165Z",
     "iopub.status.idle": "2025-02-07T03:12:34.816655Z",
     "shell.execute_reply": "2025-02-07T03:12:34.815579Z"
    },
    "papermill": {
     "duration": 0.038304,
     "end_time": "2025-02-07T03:12:34.818472",
     "exception": false,
     "start_time": "2025-02-07T03:12:34.780168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixture_id</th>\n",
       "      <th>team_name</th>\n",
       "      <th>total_passes</th>\n",
       "      <th>completed_passes</th>\n",
       "      <th>pass_percentage</th>\n",
       "      <th>assists</th>\n",
       "      <th>goals</th>\n",
       "      <th>expected_goals</th>\n",
       "      <th>shots_on_goal</th>\n",
       "      <th>shots_off_goal</th>\n",
       "      <th>...</th>\n",
       "      <th>total_shots_rolling</th>\n",
       "      <th>blocked_shots_rolling</th>\n",
       "      <th>fouls_rolling</th>\n",
       "      <th>corner_kicks_rolling</th>\n",
       "      <th>offsides_rolling</th>\n",
       "      <th>ball_possession_rolling</th>\n",
       "      <th>yellow_cards_rolling</th>\n",
       "      <th>red_cards_rolling</th>\n",
       "      <th>goalkeeper_saves_rolling</th>\n",
       "      <th>goals_prevented_rolling</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5870</th>\n",
       "      <td>491154</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>531</td>\n",
       "      <td>461</td>\n",
       "      <td>0.87</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>13.666667</td>\n",
       "      <td>6.333333</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.463333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5871</th>\n",
       "      <td>491164</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>331</td>\n",
       "      <td>232</td>\n",
       "      <td>0.70</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5872</th>\n",
       "      <td>491175</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>534</td>\n",
       "      <td>442</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5873</th>\n",
       "      <td>491186</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>415</td>\n",
       "      <td>338</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>13.333333</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.563333</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5874</th>\n",
       "      <td>491195</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>5.666667</td>\n",
       "      <td>12.666667</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.490000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6209</th>\n",
       "      <td>1151191</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>425</td>\n",
       "      <td>351</td>\n",
       "      <td>0.83</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.51</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>3.333333</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.436667</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6210</th>\n",
       "      <td>1151216</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>539</td>\n",
       "      <td>462</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.54</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>8.666667</td>\n",
       "      <td>5.333333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.443333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6211</th>\n",
       "      <td>1151232</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>469</td>\n",
       "      <td>396</td>\n",
       "      <td>0.84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.85</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>15.333333</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>10.333333</td>\n",
       "      <td>6.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.510000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6212</th>\n",
       "      <td>1151246</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>478</td>\n",
       "      <td>398</td>\n",
       "      <td>0.83</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.63</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>18.666667</td>\n",
       "      <td>4.666667</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>6.333333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.510000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6213</th>\n",
       "      <td>1312301</td>\n",
       "      <td>Portland Timbers</td>\n",
       "      <td>537</td>\n",
       "      <td>459</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.70</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>17.333333</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.526667</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>344 rows × 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixture_id         team_name  total_passes  completed_passes  \\\n",
       "5870      491154  Portland Timbers           531               461   \n",
       "5871      491164  Portland Timbers           331               232   \n",
       "5872      491175  Portland Timbers           534               442   \n",
       "5873      491186  Portland Timbers           415               338   \n",
       "5874      491195  Portland Timbers             0                 0   \n",
       "...          ...               ...           ...               ...   \n",
       "6209     1151191  Portland Timbers           425               351   \n",
       "6210     1151216  Portland Timbers           539               462   \n",
       "6211     1151232  Portland Timbers           469               396   \n",
       "6212     1151246  Portland Timbers           478               398   \n",
       "6213     1312301  Portland Timbers           537               459   \n",
       "\n",
       "      pass_percentage  assists  goals  expected_goals  shots_on_goal  \\\n",
       "5870             0.87        0      1            0.00              5   \n",
       "5871             0.70        3      3            0.00              6   \n",
       "5872             0.83        0      0            0.00              4   \n",
       "5873             0.81        0      1            0.00              3   \n",
       "5874             0.00        0      0            0.00              3   \n",
       "...               ...      ...    ...             ...            ...   \n",
       "6209             0.83        1      1            0.51              4   \n",
       "6210             0.86        0      0            2.54             10   \n",
       "6211             0.84        0      0            1.85              7   \n",
       "6212             0.83        1      1            0.63              2   \n",
       "6213             0.85        0      0            0.70              4   \n",
       "\n",
       "      shots_off_goal  ...  total_shots_rolling  blocked_shots_rolling  \\\n",
       "5870               6  ...             6.000000               2.666667   \n",
       "5871               3  ...             5.000000               1.333333   \n",
       "5872               6  ...             9.000000               2.333333   \n",
       "5873               3  ...            15.000000               5.000000   \n",
       "5874               7  ...            14.000000               5.666667   \n",
       "...              ...  ...                  ...                    ...   \n",
       "6209               4  ...            16.000000               3.333333   \n",
       "6210               7  ...            14.000000               2.333333   \n",
       "6211              10  ...            15.333333               4.666667   \n",
       "6212               3  ...            18.666667               4.666667   \n",
       "6213               7  ...            17.333333               4.333333   \n",
       "\n",
       "      fouls_rolling  corner_kicks_rolling  offsides_rolling  \\\n",
       "5870      13.666667              6.333333          2.000000   \n",
       "5871      12.000000              5.000000          2.666667   \n",
       "5872      13.000000              5.000000          2.000000   \n",
       "5873      13.333333              4.666667          1.333333   \n",
       "5874      12.666667              4.000000          1.000000   \n",
       "...             ...                   ...               ...   \n",
       "6209      10.000000              4.333333          1.000000   \n",
       "6210       8.666667              5.333333          1.000000   \n",
       "6211      10.333333              6.666667          1.333333   \n",
       "6212      10.000000              6.333333          2.333333   \n",
       "6213      13.000000              4.333333          2.000000   \n",
       "\n",
       "      ball_possession_rolling  yellow_cards_rolling  red_cards_rolling  \\\n",
       "5870                 0.463333              1.000000                0.0   \n",
       "5871                 0.533333              0.666667                0.0   \n",
       "5872                 0.550000              1.000000                0.0   \n",
       "5873                 0.563333              1.666667                0.0   \n",
       "5874                 0.490000              1.666667                0.0   \n",
       "...                       ...                   ...                ...   \n",
       "6209                 0.436667              2.333333                0.0   \n",
       "6210                 0.443333              2.333333                0.0   \n",
       "6211                 0.510000              1.333333                0.0   \n",
       "6212                 0.510000              1.000000                0.0   \n",
       "6213                 0.526667              1.000000                0.0   \n",
       "\n",
       "      goalkeeper_saves_rolling  goals_prevented_rolling  \n",
       "5870                  2.666667                 0.000000  \n",
       "5871                  2.333333                 0.000000  \n",
       "5872                  2.000000                 0.000000  \n",
       "5873                  1.333333                 0.000000  \n",
       "5874                  2.666667                 0.000000  \n",
       "...                        ...                      ...  \n",
       "6209                  2.666667                 0.000000  \n",
       "6210                  2.666667                 0.000000  \n",
       "6211                  1.000000                 0.333333  \n",
       "6212                  3.000000                 0.666667  \n",
       "6213                  4.333333                 0.666667  \n",
       "\n",
       "[344 rows x 54 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matches_rolling[matches_rolling['team_name'] == 'Portland Timbers'].sort_values(\"date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6335210d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-07T03:12:34.839272Z",
     "iopub.status.busy": "2025-02-07T03:12:34.838867Z",
     "iopub.status.idle": "2025-02-07T03:12:34.856645Z",
     "shell.execute_reply": "2025-02-07T03:12:34.855258Z"
    },
    "papermill": {
     "duration": 0.029991,
     "end_time": "2025-02-07T03:12:34.858485",
     "exception": false,
     "start_time": "2025-02-07T03:12:34.828494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>prediction</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2184</td>\n",
       "      <td>60</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1082</td>\n",
       "      <td>38</td>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1174</td>\n",
       "      <td>38</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "prediction     0   1    2\n",
       "actual                   \n",
       "0           2184  60  392\n",
       "1           1082  38  216\n",
       "2           1174  38  226"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined = pd.DataFrame(dict(actual=test['result'],prediction = preds))\n",
    "pd.crosstab(index=combined['actual'],columns=combined['prediction'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bc64af9",
   "metadata": {
    "papermill": {
     "duration": 0.009356,
     "end_time": "2025-02-07T03:12:34.877788",
     "exception": false,
     "start_time": "2025-02-07T03:12:34.868432",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Build ML Model (Try 3)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cac9b7e",
   "metadata": {
    "papermill": {
     "duration": 0.009233,
     "end_time": "2025-02-07T03:12:34.896754",
     "exception": false,
     "start_time": "2025-02-07T03:12:34.887521",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**FROM CHATGPT: Ways to Improve Model**\n",
    "\n",
    "1️⃣ Feature Engineering – Add More Predictive Features\n",
    "Your current predictors only include rolling averages of team stats, which are useful but miss key contextual factors. Consider adding:\n",
    "\n",
    "✅ Advanced Team Performance Metrics\n",
    "Expected Goals Against (xGA) Rolling: Measures defensive performance.\n",
    "Form Streaks: Last 5-match form (WDLDD → convert to numeric values).\n",
    "Home/Away Strength: Some teams perform very differently at home vs. away.\n",
    "Rest Days: More rest can improve performance (days_since_last_match).\n",
    "✅ Squad Strength & Player Data\n",
    "Injuries & Suspensions: Missing key players can heavily impact results.\n",
    "Starting Lineup Strength: Use team ratings or FIFA/FBRef player values.\n",
    "Substitution Impact: Does the team benefit from impactful subs?\n",
    "✅ Contextual Match Information\n",
    "Weather Conditions: Rain, heat, and wind affect games.\n",
    "Match Importance: Friendly vs. Champions League final? Playoff implications?\n",
    "Team Budget/Market Value: Teams with higher budgets tend to win more.\n",
    "✅ Betting Odds & Market Signals\n",
    "Bookmaker Probabilities: Sportsbooks adjust odds using sophisticated models.\n",
    "Public Betting Data: Overbet teams often underperform.\n",
    "\n",
    "2️⃣ Model Tuning – Optimize Your Algorithm\n",
    "Increase Tree Depth (Random Forest/XGBoost): Allow deeper trees to capture interactions.\n",
    "Hyperparameter Tuning: Use GridSearchCV or RandomizedSearchCV to find optimal hyperparameters.\n",
    "Feature Selection: Some features may be hurting accuracy. Use:\n",
    "python\n",
    "Copy\n",
    "Edit\n",
    "from sklearn.feature_selection import RFECV\n",
    "selector = RFECV(model, step=1, cv=5)\n",
    "selector.fit(X_train, y_train)\n",
    "print(selector.support_)  # Identifies most important features\n",
    "\n",
    "4️⃣ Try More Advanced Models\n",
    "Your accuracy may be limited by Random Forest. Try:\n",
    "\n",
    "Gradient Boosting (XGBoost, LightGBM, CatBoost) – Handles structured data well.\n",
    "Neural Networks (Deep Learning) – If you have tons of data.\n",
    "Stacked Models – Combine multiple models for better performance."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6318973,
     "sourceId": 10222081,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 43.231426,
   "end_time": "2025-02-07T03:12:35.628087",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-07T03:11:52.396661",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
